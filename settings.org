#+TITLE: Chico's .emacs.d
#+PROPERTY: header-args :tangle yes

* Make it easy to find this file

#+BEGIN_SRC emacs-lisp
  (defun local/find-settings ()
    "Edit settings.org"
    (interactive)
    (find-file (concat user-emacs-directory "settings.org")))
  
  (defun local/reload-emacs ()
    "Reload emacs"
    (interactive)
    (load-file user-init-file))
  
  (global-set-key (kbd "C-c I") 'local/find-settings)
  (global-set-key (kbd "C-c R") 'local/reload-emacs)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

* Overriding some of Emacs's defaults
** Use org-mode for scratch

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message
  (concat
    "# This buffer is for unsaved text, like general annotations and etc..\n"
    "# To create a file, visit it with C-x C-f and enter text in this buffer instead.\n"
    "\n"))
#+END_SRC

** Kill the Emacs buffer on startup

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-buffer-choice nil)
#+END_SRC

** Disable the error bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Make =yes= or =no= prompts shorter

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Dired

[[https://www.gnu.org/software/emacs/manual/html_node/dired-x/][Dired-x]] adds extra features on top of Dired. For now I only need it
to omit temporary and hidden files.

#+BEGIN_SRC emacs-lisp
(load "dired-x")
(with-eval-after-load "dired"
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "^\\.|\\*\\\#")))
#+END_SRC
** Auto-reload file changed outside of Emacs automatically

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

* Look and feel
** UI decluttering

These are just to make the editor look as clean as possible by hiding
many of Emacs's default bars.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

The following sets the frame title as the active buffer's name, its
mode and where it's saved at.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("" "%b %* [%m]"))
#+END_SRC

** Theme and font
   
For now I'm using [[https://github.com/anler/minimal-theme][minimal-theme]]. I've used [[https://draculatheme.com/emacs/][dracula-theme]] and
[[https://github.com/thblt/eziam-theme-emacs][eziam-theme]] too, and I often switch between them.

#+BEGIN_SRC emacs-lisp
    ;(use-package dracula-theme)
    ;(use-package eziam-theme)
    ;(use-package minimal-theme
    ;  :config (load-theme 'minimal t))
  (use-package dracula-theme
    :config (load-theme 'dracula t))
#+END_SRC

I really like [[https://www.jetbrains.com/lp/mono/][Jetbrains Mono]] for the font. You can override this
by settings =local/preferred-font= on =local-variables.el=.

#+BEGIN_SRC emacs-lisp
;(let ((chosen-font (local/get 'local-preferred-font "Jetbrains Mono-14")))
;  (setq default-frame-alist `((font . ,chosen-font))))
#+END_SRC

** Mode-line tweaks

I've been using [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]] for a few years now together with
[[https://github.com/tarsius/minions][minions]].  They're amazing, but right now I'm using [[https://github.com/tautologyclub/feebleline][feebleline]] for a
more minimalist look.

#+BEGIN_SRC emacs-lisp
  ;(use-package smart-mode-line
  ;  :init (setq sml/no-confirm-load-theme t)
  ;	    (setq sml/theme 'dark)
  ;  :config (sml/setup))

  ;(use-package minions
  ;  :config (minions-mode 1))

  (use-package feebleline
    :config (feebleline-mode 1))
#+END_SRC

** Golden ratio for the windows

#+BEGIN_SRC emacs-lisp
  ;;(use-package golden-ratio
  ;;  :config (add-to-list 'golden-ratio-extra-commands 'ace-window)
  ;;          (golden-ratio-mode 1))
#+END_SRC

** Frames-only mode

#+BEGIN_SRC emacs-lisp
(use-package frames-only-mode
  :config (frames-only-mode 1))
#+END_SRC

** Window dividers

#+BEGIN_SRC emacs-lisp
  ;;(setq window-divider-default-places t)
  ;;(setq window-divider-default-right-width 1)
  ;;(window-divider-mode 1)
#+END_SRC

* Navigation
** Evil mode

Nothing much to explain here, I'm used to Vim's approach of modal editing and
navigation. That's basically why
[[https://github.com/emacs-evil/evil][evil-mode]] is being used here. This
enables evil-mode everywhere:

#+BEGIN_SRC emacs-lisp
(use-package evil
  :config (evil-mode 1))
#+END_SRC

Evil sometimes gets in the way in some modes, however, so the snippet below
disables it for them:

#+BEGIN_SRC emacs-lisp
(setq local/override-mode-map 
  '((dired-mode . emacs)
    (imenu-list-major-mode . emacs)
    (cider-repl-mode . emacs)
    (edebug-mode . emacs)))
  
(with-eval-after-load "evil"
  (cl-loop for (mode . state) in local/override-mode-map
    do (evil-set-initial-state mode state)))
#+END_SRC

** Shortcuts and keybindings

Most - if not all - of my custom keybindings are prefixed by
[[https://github.com/noctuid/general.el][general.el]]. The "leader key" here defaults to =C-c= but can be
overriden by setting =local/leader-key= on your =local-variables.el=.

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer local/leader-def
    :prefix (local/get 'local/leader-key "C-c")))
#+END_SRC

There's also [[https://github.com/abo-abo/hydra][hydra]], which is used to neatly group a specific set
of commands/shortcuts.

** Ivy Mode
#+BEGIN_SRC emacs-lisp
	(use-package ivy
      
    :bind (("M-x" . counsel-M-x)
             ("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)	
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      ("C-c C-c M-x" . execute-extended-command)
		     :config
		     (progn
		       (with-eval-after-load 'ido
			 (ido-mode -1)
			 (ivy-mode 1)))
      
	       ;; Show recently killed buffers when calling `ivy-switch-buffer'
	       (setq ivy-use-virtual-buffers t)
	       (setq ivy-virtual-abbreviate 'full) ;Show the full virtual file paths
      
	       (setq ivy-count-format "%d/%d ")
	       (setq ivy-re-builders-alist '((t . ivy--regex-plus))) ;Default
	       ;; (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
      
	       ;; Do not show "./" and "../" in the `counsel-find-file' completion list
	       (setq ivy-extra-directories nil)    ;Default value: ("../" "./")
		     )
      
	   (use-package counsel
	     :defer t
	     :config
	;; Show parent directory in the prompt
	     (ivy-set-prompt 'counsel-ag #'counsel-prompt-function-dir)
      )
#+END_SRC
